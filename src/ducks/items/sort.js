export const sorter = ({field, ascending}) => (a, b) => {
    const sortFn = {
        _ItemCode: (a, b) => a.ItemCode.toLowerCase() === b.ItemCode.toLowerCase() ? 0 : (a.ItemCode.toLowerCase() > b.ItemCode.toLowerCase() ? 1 : -1),
        _WarehouseCode: (a, b) => a.WarehouseCode.toLowerCase() === b.WarehouseCode.toLowerCase() ? 0 : (a.WarehouseCode.toLowerCase() > b.WarehouseCode.toLowerCase() ? 1 : -1),
        _ItemCodeDesc: (a, b) => a.WarehouseCode.toLowerCase() === b.ItemCodeDesc.toLowerCase() ? 0 : (a.ItemCodeDesc.toLowerCase() > b.ItemCodeDesc.toLowerCase() ? 1 : -1),
        _ProductType: (a, b) => a.ProductType.toLowerCase() === b.ProductType.toLowerCase() ? 0 : (a.ProductType.toLowerCase() > b.ProductType.toLowerCase() ? 1 : -1),
        _ProductLine: (a, b) => a.ProductLine.toLowerCase() === b.ProductLine.toLowerCase() ? 0 : (a.ProductLine.toLowerCase() > b.ProductLine.toLowerCase() ? 1 : -1),
        _ItemStatus: (a, b) => (a.ItemStatus || '').toLowerCase() === (b.ItemStatus || '').toLowerCase() ? 0 : ((a.ItemStatus || '').toLowerCase() > (b.ItemStatus || '').toLowerCase() ? 1 : -1),
        _buffer: (a, b) => ((a.buffer || 0) - (b.buffer || 0)),
        _QuantityOnHand: (a, b) => (a.QuantityOnHand - b.QuantityOnHand),
        _QuantityOrdered: (a, b) => (a.QuantityOrdered - b.QuantityOrdered),
        _QtyRequiredForWO: (a, b) => (a.QtyRequiredForWO - b.QtyRequiredForWO),
        _QuantityInBTX: (a, b) => (a.QuantityInBTX - b.QuantityInBTX),
        _QuantityOnIT: (a, b) => (a.QuantityOnIT - b.QuantityOnIT),
        _ActualAvailable: (a, b) => (a.ActualAvailable - b.ActualAvailable),
        _QuantityAvailable: (a, b) => (a.QuantityAvailable - b.QuantityAvailable),
        ItemCode: (a, b) => sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        WarehouseCode: (a, b) => sortFn._WarehouseCode(a, b) || sortFn._ItemCode(a, b),
        ItemCodeDesc: (a, b) => sortFn._ItemCodeDesc(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        ProductType: (a, b) => sortFn._ProductType(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        ProductLine: (a, b) => sortFn._ProductLine(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        ItemStatus: (a, b) => sortFn._ItemStatus(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        buffer: (a, b) => sortFn._buffer(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        QuantityOnHand: (a, b) => sortFn._QuantityOnHand(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        QuantityOrdered: (a, b) => sortFn._QuantityOrdered(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        QtyRequiredForWO: (a, b) => sortFn._QtyRequiredForWO(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        QuantityOnIT: (a, b) => sortFn._QuantityOnIT(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        QuantityInBTX: (a, b) => sortFn._QuantityInBTX(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        ActualAvailable: (a, b) => sortFn._ActualAvailable(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
        QuantityAvailable: (a, b) => sortFn._QuantityAvailable(a, b) || sortFn._ItemCode(a, b) || sortFn._WarehouseCode(a, b),
    };
    return sortFn[field](a, b) * (ascending ? 1 : -1);
};
